nameOverride: ""
## Override the deployment namespace
##
namespaceOverride: ""
## Provide a k8s version to auto dashboard import script example: kubeTargetVersionOverride: 1.16.6
##
kubeTargetVersionOverride: ""
## Allow kubeVersion to be overridden while creating the ingress
##
kubeVersionOverride: ""
## Provide a name to substitute for the full names of resources
##
fullnameOverride: ""
## Labels to apply to all resources
##

global:
  rbac:
    create: true
    pspEnabled: true
    pspAnnotations: {}
      ## Specify pod annotations
      ## Ref: https://kubernetes.io/docs/concepts/policy/pod-security-policy/#apparmor
      ## Ref: https://kubernetes.io/docs/concepts/policy/pod-security-policy/#seccomp
      ## Ref: https://kubernetes.io/docs/concepts/policy/pod-security-policy/#sysctl
      ##
      # seccomp.security.alpha.kubernetes.io/allowedProfileNames: '*'
      # seccomp.security.alpha.kubernetes.io/defaultProfileName: 'docker/default'
      # apparmor.security.beta.kubernetes.io/defaultProfileName: 'runtime/default'

  ## Reference to one or more secrets to be used when pulling images
  ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/
  ##
  imagePullSecrets: []
  # - name: "image-pull-secret"

## Configuration for alertmanager
## ref: https://prometheus.io/docs/alerting/alertmanager/
##

commonLabels: {}
alertmanger:
  serviceAccount:
    create: true
    name: altermanager-sa
    annotations: {}
  ingress:
    enabled: false
    annotations: {}
    labels: {}
    hosts: 
       - .reines-test.link
    paths: 
     - /
    tls: 
     - secretName: {}
       hosts:
       - .reines-test.link
  service:
    annotations: {}
    labels: {}
    clusterIP: ""
    port: 9093
    targetPort: 9093
    nodePort: 30903
    additionalPorts: []
    externalIPs: []
    loadBalancerIP: ""
    loadBalancerSourceRanges: []
    type: ClusterIP
    # NodePort, LoadBalancer

grafana:
  ingress:
    enabled: false
    annotations: {}
    labels: {}
    hosts: 
      - .reines-test.link
    path: /
    tls: 
     - secretName: {}
       hosts:
       - .reines-test.link
  service:
    portName: service
    #type: ClutsterIP
    # NodePort, LoadBalancer

# kubeEtcd:
# #kube-etcd-down
#   serviceMonitor:
# #    enabled: true
# #    interval: ""
# #    proxyUrl: ""
#     scheme: https
#     insecureSkipVerify: false
#     serverName: localhost
#     caFile: /etc/prometheus/secrets/etcd-client-cert/etcd-ca
#     certFile: /etc/prometheus/secrets/etcd-client-cert/etcd-client
#     keyFile: /etc/prometheus/secrets/etcd-client-cert/etcd-client-key


PrometheusOperator:
  service:
    annotations: {}
    labels: {}
    clusterIP: ""
    nodePort: 30080
    nodePortTls: 30443
    additionalPorts: []
    loadBalancerIP: ""
    loadBalancerSourceRanges: []
    type: NodePort
    # NodePort, LoadBalancer
    externalIPs: []

prometheus:
#kube-etcd-down
  serviceAccount:
    create: true
    name: prometheus-sa
  service:
      annotations: {}
      labels: {}
      clusterIP: ""
      port: 9090
      targetPort: 9090
      externalIPs: []
      nodePort: 30090
      loadBalancerIP: ""
      loadBalancerSourceRanges: []
      type: ClusterIP
    # NodePort, LoadBalancer

  ingress:
    enabled: false
    annotations: {}
    labels: {}
    hosts: 
      - .reines-test.link
    paths:
      path: /
      pathType: ImplementationSpecific
      tls: 
      - secretName: {}
        hosts:
        - .reines-test.link
  storageSpec: 
      volumeClaimTemplate:
        spec:
          storageClassName: efs-sc
          accessModes: ["ReadWriteOnce"]
          resources:
            requests:
              storage: 10Gi
  prometheusSpec:
    secrets: []
    
      ## AdditionalScrapeConfigs allows specifying additional Prometheus scrape configurations. Scrape configurations
      ## are appended to the configurations generated by the Prometheus Operator. Job configurations must have the form
      ## as specified in the official Prometheus documentation:
      ## https://prometheus.io/docs/prometheus/latest/configuration/configuration/#scrape_config. As scrape configs are
      ## appended, the user is responsible to make sure it is valid. Note that using this feature may expose the possibility
      ## to break upgrades of Prometheus. It is advised to review Prometheus release notes to ensure that no incompatible
      ## scrape configs are going to break Prometheus after the upgrade.
      ##
      ## The scrape configuration example below will find master nodes, provided they have the name .*mst.*, relabel the
      ## port to 2379 and allow etcd scraping provided it is running on all Kubernetes master nodes
      ##
    additionalScrapeConfigs: []
prometheusOperator:
    admissionWebhooks:
        failurePolicy: Ignore

